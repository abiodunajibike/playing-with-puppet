{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description": "Sample template to bring up WordPress using the Puppet client to install server roles. A WaitCondition is used to hold up the stack \n
    creation until the application is deployed. **WARNING** This template creates one or more Amazon EC2 instances and CloudWatch alarms. You will be billed \n
    for the AWS resources used if you create a stack from this template.",

    "Parameters" : {
        "KeyName": {
            "Type": "String",
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the web server",
            "Default": "{{resolve:ssm:PuppetMasterKeyName:1}}",
        },
        "PuppetClientSecurityGroup": {
            "Description" : "The EC2 security group for the instances",
            "Type": "String",
            "Default": "{{resolve:ssm:PuppetClientSecurityGroup:1}}",
        },
        "PuppetMasterDNSName": {
            "Description" : "The PuppetMaster DNSName",
            "Type": "String",
            "Default": "{{resolve:ssm:PuppetMasterDNSName:1}}",
        },
        "PuppetMasterPrivateIp": {
            "Description" : "The PuppetMaster PrivateIp",
            "Type": "String",
            "Default": "{{resolve:ssm:PuppetMasterPrivateIp:1}}",
        },
        "InstanceType": {
            "Default": "t1.micro",
            "Description" : "Type of EC2 instance for web server",
            "Type": "String",
            "AllowedValues" : [
                "t1.micro",
                "m1.small",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "c1.medium",
                "c1.xlarge"
            ],
            "ConstraintDescription" : "must contain only alphanumeric characters."
        },
        "DatabaseType": {
            "Default": "db.t2.small",
            "Description" : "The database instance type",
            "Type": "String",
            "AllowedValues" : [ "db.t2.small", "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge" ],
            "ConstraintDescription" : "must contain only alphanumeric characters."
        },
        "DatabaseUser": {
            "Default" : "admin",
            "NoEcho": "true",
            "Type": "String",
            "Description" : "Test database admin account name",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
        },
        "DatabasePassword": {
            "Default" : "randompassword2020",
            "NoEcho": "true",
            "Type": "String",
            "Description" : "Test database admin account password",
            "MinLength": "1",
            "MaxLength": "41",
            "AllowedPattern" : "[a-zA-Z0-9]*",
            "ConstraintDescription" : "must contain only alphanumeric characters."
        },
        "ConfigS3Bucket" : {
            "Default" : "https://s3.amazonaws.com/learning-puppet-config-12",
            "Description" : "Location of package (Zip, GZIP or Git repository URL) that includes the PuppetMaster content",
            "Type" : "String"
        }
    },

    "Mappings": {
        "AWSRegionAMIEC2" : {
          "us-east-1"        : {"Ubuntu16" : "ami-d15a75c7"},
          "us-west-2"        : {"Ubuntu16" : "ami-746aba14"},
          "us-west-1"        : {"Ubuntu16" : "ami-a9a8e4c9"},
          "eu-west-1"        : {"Ubuntu16" : "ami-844e0bf7"},
          "eu-central-1"     : {"Ubuntu16" : "ami-a9a557c6"},
          "ap-northeast-1"   : {"Ubuntu16" : "ami-d82efcb9"},
          "ap-southeast-1"   : {"Ubuntu16" : "ami-d554f1b6"},
          "ap-southeast-2"   : {"Ubuntu16" : "ami-0bc1f168"}
        }
      },

    "Resources" : {

        "CFNInitUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Policies": [{
                    "PolicyName": "AccessForCFNInit",
                    "PolicyDocument" : {
                        "Statement": [{
                            "Effect" : "Allow",
                            "Action" : "cloudformation:DescribeStackResource",
                            "Resource" : "*"
                        }]
                    }
                }]
            }
        },
        "CFNKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref": "CFNInitUser" }
            }
        },
        "WebServer": {
            "Type": "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "configSets": {
                        "default": [ "enablePuppetLabRepo", "installPackages", "configurePuppetAgent", "setPuppetMasterHost", "startPuppetAgent" ]
                    },
                    "enablePuppetLabRepo": {
                        "commands": {
                          "1-download-file": {
                            "command": ["wget", "https://apt.puppetlabs.com/puppetlabs-release-pc1-xenial.deb", "-O", "/var/tmp/puppetlabs-release-pc1-xenial.deb"]
                          },
                          "2-enable-official-puppetlabs": {
                            "command": ["dpkg", "-i", "/var/tmp/puppetlabs-release-pc1-xenial.deb"]
                          },
                          "3-apt-get-update": {
                            "command": ["apt-get", "update", "-y"]
                          }
                        }
                      },
                    "installPackages": {
                        "packages" : {
                            "apt" : {
                                "puppet-agent" : [],
                                "gcc" : [],
                                "make" : [],
                                "rubygems" : []
                            },
                            "rubygems" : {
                                "json" : []
                            }
                        }
                    },
                    "configurePuppetAgent" : {
                        "files" : {
                            "/etc/puppetlabs/puppet/puppet.conf" : {
                                "source" : { "Fn::Join" : [ "/", [{ "Ref" : "ConfigS3Bucket" }, "agent/puppet.conf"] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        }
                    },
                    "setPuppetMasterHost": {
                        "commands": {
                            "1-set-system-hostname": {
                                "command": { "Fn::Join" : [ " ", ["hostnamectl", "set-hostname", "puppet-agent.test.internal"] ] }
                            },
                            "2-set-agent-ip": {
                                "command": { "Fn::Join" : [ " ", ["echo", "`curl http://169.254.169.254/latest/meta-data/local-ipv4`", "puppet-agent.test.internal", "| sudo tee -a /etc/hosts"] ] }
                            },
                            "3-update-etc-hosts": {
                                "command": { "Fn::Join" : [ " ", ["echo", { "Ref" : "PuppetMasterPrivateIp" }, "puppet", "| sudo tee -a /etc/hosts"] ] }
                            },
                            "4-set-hostname": {
                              "command": { "Fn::Join" : [ " ", ["echo",  { "Ref" : "PuppetMasterPrivateIp" } , "puppet-master.test.org", "| sudo tee -a /etc/hosts"] ] }
                            }
                        }
                    },
                    "startPuppetAgent": {
                        "commands": {
                            "1-start-puppet-agent": {
                              "command": [ "systemctl", "start", "puppet" ]
                            },
                            "2-enable-puppet-agent": {
                              "command": [ "systemctl", "enable", "puppet" ]
                            },
                        }
                    },
                }
            },
            "Properties": {
                "SecurityGroups": [ { "Ref" : "PuppetClientSecurityGroup" }, { "Ref" : "EC2SecurityGroup" } ],
                "ImageId" : {"Fn::FindInMap": [ "AWSRegionAMIEC2", { "Ref": "AWS::Region" }, "Ubuntu16"]},
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : ["", [
                            "#!/bin/bash -xe\n",
                            "apt-get update -y \n",
                            "apt-get -y install python-setuptools\n",
                            "mkdir -p /opt/aws/bin\n",
                            "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                            "easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz\n",

                            "/opt/aws/bin/cfn-init --region ", { "Ref" : "AWS::Region" },
                            " -s ", { "Ref" : "AWS::StackName" }, " -r WebServer ",
                            " --access-key ", { "Ref" : "CFNKeys" },
                            " --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n",
                            "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "ApplicationWaitHandle" }, "'\n"]
                        ]
                    }
                },
                "KeyName": { "Ref": "KeyName" },
                "Tags": [
                    {
                      "Key": "Name",
                      "Value": "Puppet Agent"
                    }
                  ],
                "InstanceType": { "Ref": "InstanceType" }
            }
        },
        "EC2SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable HTTP access for Wordpress plus SSH access via port 22",
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" }
                ]
            }
        },
        "ApplicationWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "ApplicationWaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "WebServer",
            "Properties" : {
                "Handle" : { "Ref" : "ApplicationWaitHandle" },
                "Timeout" : "600"
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::RDS::DBSecurityGroup",
            "Properties": {
                "DBSecurityGroupIngress": {
                    "EC2SecurityGroupName": { "Ref": "EC2SecurityGroup" }
                },
                "GroupDescription": "database access"
            }
        }
    }
}