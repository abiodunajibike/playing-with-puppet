{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "Sample template to bring up Puppet Master instance that can be used to bootstrap and manage Puppet Clients. The Puppet Master is \n
    populated from an embedded template that defines the set of applications to load. **WARNING** This template creates one or more Amazon EC2 instances. \n
    You will be billed for the AWS resources used if you create a stack from this template. \n
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type for PuppetMaster",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ 
        "t1.micro",
        "m1.small",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "c1.medium",
        "c1.xlarge"
      ],
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the PuppetMaster",
      "Default": "puppet-test-key",
      "Type" : "String"
    },
    "ContentManifest" : {
      "Default" : "/wordpress/: { include wordpress }",
      "Description" : "Manifest of roles to add to nodes.pp",
      "Type" : "String"
    },
    "ContentLocation" : {
      "Default" : "https://s3.amazonaws.com/cloudformation-examples/wordpress-puppet-config.tar.gz",
      "Description" : "Location of package (Zip, GZIP or Git repository URL) that includes the PuppetMaster content",
      "Type" : "String"
    }
  },

  "Mappings": {
    "AWSRegionAMIEC2" : {
      "us-east-1"        : {"Ubuntu16" : "ami-d15a75c7"},
      "us-west-2"        : {"Ubuntu16" : "ami-746aba14"},
      "us-west-1"        : {"Ubuntu16" : "ami-a9a8e4c9"},
      "eu-west-1"        : {"Ubuntu16" : "ami-844e0bf7"},
      "eu-central-1"     : {"Ubuntu16" : "ami-a9a557c6"},
      "ap-northeast-1"   : {"Ubuntu16" : "ami-d82efcb9"},
      "ap-southeast-1"   : {"Ubuntu16" : "ami-d554f1b6"},
      "ap-southeast-2"   : {"Ubuntu16" : "ami-0bc1f168"}
      }
  },

  "Resources" : {
    "CFNInitUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Policies": [{
          "PolicyName": "AccessForCFNInit",
          "PolicyDocument" : {
            "Statement": [{
              "Effect" : "Allow",
              "Action" : "cloudformation:DescribeStackResource",
              "Resource" : "*"
            }]
          }
        }]
      }
    },
    "CFNKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref": "CFNInitUser" }
      }
    },

    "PuppetMasterInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets": {
            "full_install": [ "install_and_enable_cfn_hup" ],
            "default": ["updateAPT", "installPackages", "configurePuppet", "setPuppetMemory", "startPuppet"]
          },
          "install_and_enable_cfn_hup" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.PuppetMasterInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --configsets full_install ",
                  "         --resource PuppetMasterInstance ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              },
              "/lib/systemd/system/cfn-hup.service": {
                  "content": { "Fn::Join" : ["", [
                  "[Unit]\n",
                  "Description=cfn-hup daemon\n\n",
                  "[Service]\n",
                  "Type=simple\n",
                  "ExecStart=/opt/aws/bin/cfn-hup\n", 
                  "Restart=always\n\n",
                  "[Install]\n",
                  "WantedBy=multi-user.target"]]}
              }
            },  
            "commands" : {
              "01enable_cfn_hup" : {
                  "command" : "systemctl enable cfn-hup.service"
              },
              "02start_cfn_hup" : {
                  "command" : "systemctl start cfn-hup.service"
              }
            }
          },
          "updateAPT": {
            "commands": {
              "1-download-file": {
                "command": ["wget", "https://apt.puppetlabs.com/puppetlabs-release-pc1-xenial.deb", "-O", "/var/tmp/puppetlabs-release-pc1-xenial.deb"]
              },
              "2-enable-official-puppetlabs": {
                "command": ["dpkg", "-i", "/var/tmp/puppetlabs-release-pc1-xenial.deb"]
              },
              "3-apt-get-update": {
                "command": ["apt-get", "update", "-y"]
              }
            }
          },
          "installPackages": {
            "packages" : {
              "apt" : {
                "puppetserver" : [],
                "gcc" : [],
                "make" : [],
                "rubygems" : []
              },
              "rubygems" : {
                "json" : []
              }
            },
          },
          "configurePuppet" : {
            "sources" : {
              "/etc/puppet" : { "Ref" : "ContentLocation" }
            },
            "files" : {
              "/etc/yum.repos.d/epel.repo" : {
                "source" : "https://s3.amazonaws.com/cloudformation-examples/enable-epel-on-amazon-linux-ami",
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/puppet/autosign.conf" : {
                "content" : "*.internal\n",
                "mode" : "100644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/puppet/fileserver.conf" : {
                "content" : "[modules] \n allow *.internal \n",
                "mode" : "100644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/puppet/puppet.conf" : {
                "content" : { "Fn::Join" : ["", [
                "[main] \n",
                " vardir=/opt/puppetlabs/server/data/puppetserver\n",
                " logdir=/var/log/puppetlabs/puppetserver \n",
                " rundir=/var/run/puppetlabs/puppetserver \n",
                " pidfile=/var/run/puppetlabs/puppetserver/puppetserver.pid \n",
                " ssldir=$vardir/ssl \n",
                " pluginsync=true \n",
                "[agent] \n",
                " classfile=$vardir/classes.txt\n",
                " localconfig=$vardir/localconfig\n"]] },
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/puppet/modules/cfn/manifests/init.pp" : {
                "content" : "class cfn {}",
                "mode" : "100644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/puppet/modules/cfn/lib/facter/cfn.rb" : {
                "source" : "https://s3.amazonaws.com/cloudformation-examples/cfn-facter-plugin.rb",
                "mode" : "100644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/puppet/manifests/nodes.pp" : {
                "content" : {"Fn::Join" : ["", [
                "node basenode { \n",
                "  include cfn \n",
                "}\n",
                "node /^.*internal$/ inherits basenode {\n",
                "  case $cfn_roles {\n",
                "    ", { "Ref" : "ContentManifest" }, "\n",
                "  }\n",
                "}\n"]]},
                "mode" : "100644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/puppet/manifests/site.pp" : {
                "content" : "import\"nodes\"\n",
                "mode" : "100644",
                "owner" : "root",
                "group" : "root"
              }
            },
          },
          "setPuppetMemory": {
            "commands": {
              "set-puppetserver-memory": {
                "command": ["sed", "-i", "s/JAVA_ARGS=.*/JAVA_ARGS='-Xms512m -Xmx512m -XX:MaxPermSize=256m'/", "/etc/default/puppetserver"]
              }
            }
          },
          "startPuppet": {
            "01_enable_puppetserver" : {
              "command" : "systemctl enable puppetserver.service"
            },
            "02_start_puppetserver" : {
              "command" : "systemctl start puppetserver.service"
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "PuppetGroup" } ],
        "ImageId" : {"Fn::FindInMap": [ "AWSRegionAMIEC2", { "Ref": "AWS::Region" }, "Ubuntu16"]},
        "KeyName" : { "Ref" : "KeyName" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Puppet Master"
          }
        ],
        "UserData" : { 
          "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -xe\n",
            "apt-get update -y \n",
            "apt-get -y install python-setuptools\n",
            "mkdir -p /opt/aws/bin\n",
            "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
            "easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz\n",
            "/opt/aws/bin/cfn-init -v ",
            " --region ", { "Ref" : "AWS::Region" },
            " --stack ", { "Ref" : "AWS::StackName" },
            " --resource PuppetMasterInstance ",
            " --configsets full_install ",
            " --access-key ", { "Ref" : "CFNKeys" },
            " --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n",

            "/opt/aws/bin/cfn-init -v ",
            " --region ", { "Ref" : "AWS::Region" },
            " --stack ", { "Ref" : "AWS::StackName" },
            " --resource PuppetMasterInstance ",
            " --configsets default ",
            " --access-key ", { "Ref" : "CFNKeys" },
            " --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n"
            ]]}
        },
        "BlockDeviceMappings": [
          {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                  "VolumeSize": "100"
              }
          }
        ]
      }
    },
    "EC2SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Group for clients to communicate with Puppet Master"
      }
    },
    "PuppetGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Group for puppet communication",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8140", "ToPort" : "8140", "SourceSecurityGroupName" : { "Ref" : "EC2SecurityGroup" }},
          { "IpProtocol" : "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },
    "PuppetMasterWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "PuppetMasterWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "PuppetMasterInstance",
      "Properties" : {
        "Handle" : { "Ref" : "PuppetMasterWaitHandle" },
        "Timeout" : "6000"
      }
    }
  },

  "Outputs" : {
    "PuppetMasterDNSName" : {
      "Value" : { "Fn::GetAtt" : [ "PuppetMasterInstance", "PrivateDnsName" ] },
      "Description" : "DNS Name of PuppetMaster"
    },
    "PuppetClientSecurityGroup" : {
      "Value" : { "Ref" : "EC2SecurityGroup" },
      "Description" : "Clients of the Puppet Master should be part of this security group"
    }
  }
}